// This is your Prisma schema file
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  password      String
  image         String?
  emailVerified DateTime?
  collections   Collection[]
}

model Collection {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  name        String
  status      String    @default("Draft")
  audioUrl    String?   @map("audio_url")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  generatedAt DateTime? @map("generated_at")
  sources     Source[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  episodes    Episode[]

  @@map("collections")
}

model Source {
  id           String     @id @default(uuid())
  collectionId String     @map("collection_id")
  name         String
  url          String
  imageUrl     String?    @map("image_url")
  createdAt    DateTime   @default(now()) @map("created_at")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  episodes     Episode[]

  @@map("sources")
}

model Episode {
  id           String     @id @default(uuid())
  title        String
  description  String?
  audioUrl     String
  imageUrl     String?
  publishedAt  DateTime?
  createdAt    DateTime   @default(now())
  sourceId     String     @map("source_id")
  source       Source     @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  collectionId String     @map("collection_id")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("episodes")
}
