generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EpisodeFeedback {
  feedback_id String         @id
  userId      String         @map("user_id")
  episodeId   String         @map("episode_id")
  rating      FeedbackRating
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  episode     Episode        @relation(fields: [episodeId], references: [episode_id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([userId, episodeId])
  @@map("episode_feedback")
}

model Bundle {
  bundle_id             String                @id
  name                  String
  description           String?
  image_url             String?
  is_static             Boolean               @default(true)
  is_active             Boolean               @default(true)
  owner_user_id         String?
  created_at            DateTime              @default(now())
  user                  User?                 @relation(fields: [owner_user_id], references: [user_id])
  bundle_podcast        BundlePodcast[]
  episode               Episode[]
  user_curation_profile UserCurationProfile[]

  @@index([owner_user_id], map: "bundle_owner_idx")
  @@index([is_static, is_active], map: "bundle_static_active_idx")
}

model BundlePodcast {
  bundle_id  String
  podcast_id String
  bundle     Bundle  @relation(fields: [bundle_id], references: [bundle_id], onDelete: Cascade)
  podcast    Podcast @relation(fields: [podcast_id], references: [podcast_id], onDelete: Cascade)

  @@id([bundle_id, podcast_id])
}

model Episode {
  episode_id            String               @id
  podcast_id            String
  profile_id            String?
  bundle_id             String?
  title                 String
  description           String?
  audio_url             String
  image_url             String?
  published_at          DateTime?
  week_nr               DateTime?
  created_at            DateTime             @default(now())
  bundle                Bundle?              @relation(fields: [bundle_id], references: [bundle_id])
  podcast               Podcast              @relation(fields: [podcast_id], references: [podcast_id], onDelete: Cascade)
  user_curation_profile UserCurationProfile? @relation(fields: [profile_id], references: [profile_id])
  feedback              EpisodeFeedback[]

  @@index([bundle_id], map: "episode_bundle_idx")
  @@index([podcast_id, week_nr], map: "episode_podcast_week_idx")
  @@index([profile_id], map: "episode_profile_idx")
  @@index([published_at])
}

model Notification {
  notification_id String   @id
  user_id         String
  type            String
  message         String
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Podcast {
  podcast_id      String           @id
  name            String
  description     String?
  url             String           @unique
  image_url       String?
  category        String?
  is_active       Boolean          @default(true)
  owner_user_id   String?
  created_at      DateTime         @default(now())
  bundle_podcast  BundlePodcast[]
  episode         Episode[]
  user            User?            @relation(fields: [owner_user_id], references: [user_id])
  profile_podcast ProfilePodcast[]

  @@index([is_active])
  @@index([owner_user_id])
}

model ProfilePodcast {
  profile_id            String
  podcast_id            String
  podcast               Podcast             @relation(fields: [podcast_id], references: [podcast_id], onDelete: Cascade)
  user_curation_profile UserCurationProfile @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)

  @@id([profile_id, podcast_id])
}

model Subscription {
  subscription_id      String    @id
  user_id              String
  link_customer_id     String?
  link_subscription_id String?
  link_price_id        String?
  status               String    @default("trialing")
  current_period_start DateTime?
  current_period_end   DateTime?
  trail_start          DateTime?
  trial_end            DateTime?
  canceled_at          DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime
  user                 User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model User {
  user_id               String               @id
  name                  String?
  email                 String               @unique
  password              String
  image                 String?
  email_verified        DateTime?
  is_admin              Boolean              @default(false)
  email_notifications   Boolean              @default(true)
  in_app_notifications  Boolean              @default(true)
  created_at            DateTime             @default(now())
  updated_at            DateTime
  bundle                Bundle[]
  feedback              EpisodeFeedback[]
  notification          Notification[]
  podcast               Podcast[]
  subscription          Subscription[]
  user_curation_profile UserCurationProfile?
}

model UserCurationProfile {
  profile_id           String           @id
  user_id              String           @unique
  name                 String
  status               String           @default("Draft")
  audio_url            String?
  image_url            String?
  created_at           DateTime         @default(now())
  updated_at           DateTime
  generated_at         DateTime?
  last_generation_date DateTime?
  next_generation_date DateTime?
  is_active            Boolean          @default(true)
  is_bundle_selection  Boolean          @default(false)
  selected_bundle_id   String?
  episode              Episode[]
  profile_podcast      ProfilePodcast[]
  bundle               Bundle?          @relation(fields: [selected_bundle_id], references: [bundle_id])
  user                 User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

enum FeedbackRating {
  THUMBS_UP
  THUMBS_DOWN
  NEUTRAL
}
