---
description: Patterns for admin pages and routes – thin page, Server Components for data fetching, Client Components for interactivity, safe GCS init
globs: app/(protected)/admin/**/*.tsx,app/api/admin/**/route.ts
---

# Admin Pages and Routes Structure

Follow these patterns when working inside `app/(protected)/admin/**` and `app/api/admin/**`:

## Page composition (thin wrapper)
- Keep `page.tsx` minimal. Render feature panels via Server Components and stream with `Suspense`.
- Example structure:

```tsx
// app/(protected)/admin/bundles/page.tsx
import { Suspense } from "react"
import BundlesPanel from "../_components/BundlesPanel.server"

export const dynamic = "force-dynamic"

export default function BundlesPage() {
  return (
    <div className="container mx-auto p-6 max-w-6xl space-y-6">
      <h1 className="text-2xl font-semibold">Bundle Management</h1>
      <Suspense fallback={<div>Loading bundles…</div>}>
        {/* @ts-expect-error Async Server Component */}
        <BundlesPanel />
      </Suspense>
    </div>
  )
}
```

## Server Components (data fetching only)
- Create Server Components under `app/(protected)/admin/_components/*.server.tsx`.
- Fetch with Prisma on the server; do not import client-only libs.
- Shape data for the client and pass via typed props using types from [lib/types.ts](mdc:lib/types.ts) only (no hardcoded interfaces).

```tsx
// app/(protected)/admin/_components/BundlesPanel.server.tsx
import { prisma } from "@/lib/prisma"
import type { Bundle, Podcast } from "@/lib/types"
import BundlesPanelClient from "./BundlesPanel.client"

export default async function BundlesPanel() {
  const bundles = await prisma.bundle.findMany({
    include: { bundle_podcast: { include: { podcast: true } } },
    orderBy: { created_at: "desc" },
  })

  const shaped: (Bundle & { podcasts: Podcast[] })[] = bundles.map(b => ({
    ...(b as unknown as Bundle),
    podcasts: b.bundle_podcast.map(bp => bp.podcast as unknown as Podcast),
  }))

  return <BundlesPanelClient bundles={shaped} />
}
```

## Client Components (UI + interactivity)
- Create Client Components under `app/(protected)/admin/_components/*.client.tsx` with `"use client"`.
- Handle forms, buttons, and user interactions; call Server Actions or existing admin API routes.
- No client-side data fetching if it can be done on the server.

```tsx
// app/(protected)/admin/_components/BundlesPanel.client.tsx
"use client"
import { Card, CardHeader, CardContent, CardTitle, CardDescription } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import type { Bundle, Podcast } from "@/lib/types"

type BundleWithPodcasts = Bundle & { podcasts: Podcast[] }

export default function BundlesPanelClient({ bundles }: { bundles: BundleWithPodcasts[] }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Existing Bundles ({bundles.length})</CardTitle>
        <CardDescription>Manage your PODSLICE Bundles</CardDescription>
      </CardHeader>
      <CardContent>
        {bundles.map(bundle => (
          <div key={bundle.bundle_id}>
            <div className="flex flex-wrap gap-1">
              {bundle.podcasts.map((p: Podcast) => (
                <Badge key={p.podcast_id} variant="outline" className="text-xs">{p.name}</Badge>
              ))}
            </div>
          </div>
        ))}
      </CardContent>
    </Card>
  )
}
```

## Prisma usage
- Use the exact field names from the schema (snake_case in `where` fields, camelCase relations) per the project rule.
- Never add custom interfaces in pages; import types from [lib/types.ts](mdc:lib/types.ts).
- Import types with `import type`.

## Admin API routes
- Place admin route handlers in `app/api/admin/**/route.ts`.
- Use Node runtime where file I/O is required: `export const runtime = "nodejs"`.
- Validate inputs, return JSON, and avoid logging sensitive values.

## Safe Google Cloud Storage initialization (uploads)
- For upload routes (e.g., `app/api/admin/upload-episode/route.ts`), use lazy init and support JSON or path credentials.
- Accept the first available of: `GCS_UPLOADER_KEY_JSON` | `GCS_UPLOADER_KEY` | `GCS_UPLOADER_KEY_PATH`.
- Never print credentials or absolute paths in logs or errors.

```ts
// Lazy GCS init pattern
import { Storage } from "@google-cloud/storage"
let _storage: Storage | undefined

function looksLikeJson(v?: string) {
  if (!v) return false
  const t = v.trim(); return t.startsWith("{") || t.startsWith("[") || t.includes('"type"')
}

function getUploaderRaw() {
  return process.env.GCS_UPLOADER_KEY_JSON || process.env.GCS_UPLOADER_KEY || process.env.GCS_UPLOADER_KEY_PATH
}

function getStorage() {
  if (_storage) return _storage
  const raw = getUploaderRaw()
  if (!raw) throw new Error("Google Cloud credentials for uploader are not configured")
  try { _storage = looksLikeJson(raw) ? new Storage({ credentials: JSON.parse(raw) }) : new Storage({ keyFilename: raw }) } 
  catch { throw new Error("Failed to initialize Google Cloud Storage uploader") }
  return _storage
}
```

## Logging and secrets
- Do not log environment variables, credential contents, or absolute credential paths.
- Use generic error messages for storage initialization, upload, and read failures.

## Misc
- Use existing shadcn/ui components and theme tokens for UI.
- Keep Tailwind usage as-is unless converting to CSS Modules per workspace rules.
- After changes, ensure `pnpm build` and `pnpm lint` pass before merging.

