---
alwaysApply: true
---
# Schema source of truth if youre working with a branch out of sync with the main branch

## For "PODSLICE" aka `v0-ai-curated-podcast-app`

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid()) @map("user_id")
  name                 String?              @map("name")
  email                String               @unique @map("email")
  password             String               @map("password")
  image                String?              @map("image")
  emailVerified        DateTime?            @map("email_verified")
  isAdmin              Boolean              @default(false) @map("is_admin")
  emailNotifications   Boolean              @default(true) @map("email_notifications")
  inAppNotifications   Boolean              @default(true) @map("in_app_notifications")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  ownedBundles         Bundle[]
  feedback             EpisodeFeedback[]
  notifications        Notification[]
  ownedPodcasts        Podcast[]
  subscriptions        Subscription[]
  userCurationProfiles UserCurationProfile?

  @@map("user")
}

/// ───────────────────────────────────
/// UNIFIED PODCAST CATALOG
/// ───────────────────────────────────
model Podcast {
  id           String           @id @default(uuid()) @map("podcast_id")
  name         String           @map("name")
  description  String?          @map("description")
  url          String           @unique @map("url")
  imageUrl     String?          @map("image_url")
  category     String?          @map("category")
  isActive     Boolean          @default(true) @map("is_active")
  ownerUserId  String?          @map("owner_user_id")
  createdAt    DateTime         @default(now()) @map("created_at")
  bundleLinks  BundlePodcast[]
  episodes     Episode[]
  ownerUser    User?            @relation(fields: [ownerUserId], references: [id])
  profileLinks ProfilePodcast[]

  @@index([ownerUserId])
  @@index([isActive])
  @@map("podcast")
}

/// ───────────────────────────────────
/// UNIFIED EPISODE TABLE
/// ───────────────────────────────────
model Episode {
  id            String               @id @default(uuid()) @map("episode_id")
  podcastId     String               @map("podcast_id")
  userProfileId String?              @map("profile_id")
  bundleId      String?              @map("bundle_id")
  title         String               @map("title")
  description   String?              @map("description")
  audioUrl      String               @map("audio_url")
  imageUrl      String?              @map("image_url")
  publishedAt   DateTime?            @map("published_at")
  weekNr        DateTime?            @map("week_nr")
  createdAt     DateTime             @default(now()) @map("created_at")
  bundle        Bundle?              @relation(fields: [bundleId], references: [id])
  podcast       Podcast              @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  userProfile   UserCurationProfile? @relation(fields: [userProfileId], references: [id])
  feedback      EpisodeFeedback[]

  @@index([podcastId, weekNr], map: "episode_podcast_week_idx")
  @@index([publishedAt])
  @@index([userProfileId], map: "episode_profile_idx")
  @@index([bundleId], map: "episode_bundle_idx")
  @@map("episode")
}

/// ───────────────────────────────────
/// BUNDLES (static or user-custom)
/// ───────────────────────────────────
model Bundle {
  id          String                @id @default(uuid()) @map("bundle_id")
  name        String                @map("name")
  description String?               @map("description")
  imageUrl    String?               @map("image_url")
  isStatic    Boolean               @default(true) @map("is_static")
  isActive    Boolean               @default(true) @map("is_active")
  ownerUserId String?               @map("owner_user_id")
  createdAt   DateTime              @default(now()) @map("created_at")
  ownerUser   User?                 @relation(fields: [ownerUserId], references: [id])
  podcasts    BundlePodcast[]
  episodes    Episode[]
  profiles    UserCurationProfile[]

  @@index([isStatic, isActive], map: "bundle_static_active_idx")
  @@index([ownerUserId], map: "bundle_owner_idx")
  @@map("bundle")
}

/// Junction table: Bundle ↔ Podcast
model BundlePodcast {
  bundleId  String  @map("bundle_id")
  podcastId String  @map("podcast_id")
  bundle    Bundle  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  podcast   Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)

  @@id([bundleId, podcastId])
  @@map("bundle_podcast")
}

/// ───────────────────────────────────
/// USER CURATION PROFILES
/// ───────────────────────────────────
model UserCurationProfile {
  id                 String           @id @default(uuid()) @map("profile_id")
  userId             String           @unique @map("user_id")
  name               String           @map("name")
  status             String           @default("Draft") @map("status")
  audioUrl           String?          @map("audio_url")
  imageUrl           String?          @map("image_url")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  generatedAt        DateTime?        @map("generated_at")
  lastGenerationDate DateTime?        @map("last_generation_date")
  nextGenerationDate DateTime?        @map("next_generation_date")
  isActive           Boolean          @default(true) @map("is_active")
  isBundleSelection  Boolean          @default(false) @map("is_bundle_selection")
  selectedBundleId   String?          @map("selected_bundle_id")
  episodes           Episode[]
  podcastSelections  ProfilePodcast[]
  selectedBundle     Bundle?          @relation(fields: [selectedBundleId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_curation_profile")
}

/// Junction table: UserCurationProfile ↔ Podcast
model ProfilePodcast {
  profileId String              @map("profile_id")
  podcastId String              @map("podcast_id")
  podcast   Podcast             @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  profile   UserCurationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, podcastId])
  @@map("profile_podcast")
}

/// ───────────────────────────────────
/// SUPPORTING MODELS (unchanged logic)
/// ───────────────────────────────────
model Notification {
  id        String   @id @default(uuid()) @map("notification_id")
  userId    String   @map("user_id")
  type      String   @map("type")
  message   String   @map("message")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Subscription {
  id                 String    @id @default(uuid()) @map("subscription_id")
  userId             String    @map("user_id")
  linkCustomerId     String?   @map("link_customer_id")
  linkSubscriptionId String?   @map("link_subscription_id")
  linkPriceId        String?   @map("link_price_id")
  status             String    @default("trialing") @map("status")
  currentPeriodStart DateTime? @map("current_period_start")
  currentPeriodEnd   DateTime? @map("current_period_end")
  trialStart         DateTime? @map("trail_start")
  trialEnd           DateTime? @map("trial_end")
  canceledAt         DateTime? @map("canceled_at")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

model EpisodeFeedback {
  id        String         @id @default(uuid()) @map("feedback_id")
  userId    String         @map("user_id")
  episodeId String         @map("episode_id")
  rating    FeedbackRating @map("rating")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  episode   Episode        @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, episodeId])
  @@map("episode_feedback")
}

enum FeedbackRating {
  THUMBS_UP
  THUMBS_DOWN
  NEUTRAL
}
