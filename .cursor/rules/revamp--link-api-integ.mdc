---
alwaysApply: false
---
### Link API integration helper

 (you'll need to install the Link SDK: npm install @link-sdk/node)

// Note: This is a placeholder for Link SDK usage, actual methods might vary slightly.

// Refer to Link.com's official documentation for precise SDK usage.

import { Link } from '@link-sdk/node';

// Initialize the Link SDK with your API keys from environment variables
const link = new Link({
  secretKey: process.env.LINK_SECRET_KEY!,
  publishableKey: process.env.LINK_PUBLISHABLE_KEY!
});

export class LinkPaymentService {
  /**

* Creates a new customer record in Link.
* @param email The customer's email address.
* @param name Optional: The customer's name.
* @returns The Link Customer object.
   */
  static async createCustomer(email: string, name?: string) {
    // Example Link API call to create a customer
    return await link.customers.create({
      email,
      name,
      metadata: {
        source: 'podcast-app' // Custom metadata for tracking
      }
    });
  }

  /**

* Creates a new subscription for a customer in Link.
* @param customerId The Link Customer ID.
* @param priceId The Link Price ID for the subscription tier.
* @returns The Link Subscription object.
   */
  static async createSubscription(customerId: string, priceId: string) {
    // Example Link API call to create a subscription
    return await link.subscriptions.create({
      customer: customerId,
      items: [{ price: priceId }],
      payment_behavior: 'default_incomplete', // Or 'allow_incomplete' depending on desired flow
      payment_settings: { save_default_payment_method: 'on_subscription' },
      expand: ['latest_invoice.payment_intent'] // Expand related objects if needed
    });
  }

  /**

* Cancels an existing subscription in Link.
* @param subscriptionId The Link Subscription ID to cancel.
* @returns The canceled Link Subscription object.
   */
  static async cancelSubscription(subscriptionId: string) {
    // Example Link API call to cancel a subscription
    return await link.subscriptions.cancel(subscriptionId);
  }

  /**

* Creates a checkout session URL for the user to complete payment.
* This redirects the user to Link's hosted checkout page.
* @param customerId The Link Customer ID.
* @param priceId The Link Price ID for the subscription tier.
* @param successUrl The URL to redirect to after successful payment.
* @param cancelUrl The URL to redirect to if the user cancels payment.
* @returns The Link Checkout Session object, containing the URL to redirect the user.
   */
  static async createCheckoutSession(customerId: string, priceId: string, successUrl: string, cancelUrl: string) {
    // Example Link API call to create a checkout session
    return await link.checkout.sessions.create({
      customer: customerId,
      payment_method_types: ['card', 'eft', 'qr_code'], // Link supports various SA payment methods
      line_items: [{ price: priceId, quantity: 1 }],
      mode: 'subscription', // Set mode to 'subscription' for recurring payments
      success_url: successUrl,
      cancel_url: cancelUrl,
      allow_promotion_codes: true // Allow discount codes
    });
  }

  /**

* Handles incoming webhook events from Link.
* This function should be called by your webhook endpoint.
* It dispatches to the LinkService to update your database.
* @param event The webhook event payload from Link.
   */
  static async handleWebhook(event: any) {
    // This is a simplified example. In a real application, you'd verify the webhook signature.
    switch (event.type) {
      case 'subscription.created':
      case 'subscription.updated':
      case 'subscription.deleted':
        // Update your database based on subscription lifecycle events
        return await LinkService.updateFromLinkWebhook(event.data.object);

      case 'invoice.payment_succeeded':
        // Logic for successful payments (e.g., send confirmation email)
        console.log(`Invoice payment succeeded for: ${event.data.object.customer}`);
        break;

      case 'invoice.payment_failed':
        // Logic for failed payments (e.g., notify user, retry payment)
        console.log(`Invoice payment failed for: ${event.data.object.customer}`);
        break;

      default:
        console.log(`Unhandled Link event type: ${event.type}`);
    }
  }
}
